begin;

create table notes (
    id bigint generated by default as identity primary key,
    text text not null,
    user_id uuid references auth.users(id) not null default auth.uid(),
    created_at timestamptz default current_timestamp not null,
    updated_at timestamptz default current_timestamp not null
);

create or replace function update_timestamp()
returns trigger as $$
begin
    new.updated_at = current_timestamp;
    return new;
end;
$$ language plpgsql;

create trigger set_updated_at
    before update on notes
    for each row
    execute procedure update_timestamp();

alter table notes enable row level security;

create policy "Users can view own notes"
    on notes for select
    using (auth.uid() = user_id);

create policy "Users can insert own notes"
    on notes for insert
    with check (true);

create policy "Users can update own notes"
    on notes for update
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

create policy "Users can delete own notes"
    on notes for delete
    using (auth.uid() = user_id);

create index notes_user_id_idx on notes(user_id);
create index notes_created_at_idx on notes(created_at);

commit;